// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
 id String @id @default(uuid())
 surname String 
 firstName String
 middleName String
 gender String
 phoneNumber String @unique
 primaryEmail String @unique
 email String[] @unique
 password String
 role String
 active Boolean @default(true)
 photo String?
 about String?
 cv String[]
 passwordChangeToken String?
 passwordChangeTokenExpires DateTime?
 passwordChangeAt DateTime?

 qualifications Qualifications[]

 jobApplication ApplyForJob []

 createdAt DateTime
 updatedAt DateTime?

}

model Qualifications{
  id String @id @default(uuid())
  school String
  qualification String
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  userId String
  createdAt DateTime
  updatedAt DateTime?
}

model Company{
  id String @id @default(uuid())
  name String
  description String
  email String @unique
  phone String @unique
  role String
  password String
  active Boolean @default(true)
  photo String?
  jobs Job[]
  passwordChangeToken String?
  passwordChangeTokenExpires DateTime?
  passwordChangeAt DateTime?
  createdAt DateTime 
  updatedAt DateTime?
}

model Job{
 id String @id @default(uuid())
  title String
  type String
  description String
  location String
  salary String
  active Boolean @default(true)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  applicant ApplyForJob []
  createdAt DateTime 
  updatedAt DateTime?
}


model ApplyForJob{
  id String @id @default(uuid())
  name String
  phoneNumber String
  coverLetter String?
  linkedin String?
  experience Int @default(0)
  quoteSalary Int @default(0)
  cv String
  job Job @relation(fields: [jobId],references: [id],onDelete: Cascade)
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId String
  jobId String
  createdAt DateTime 
  updatedAt DateTime?

}