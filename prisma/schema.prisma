// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
 id Int @id @default(autoincrement())
 surname String 
 firstName String
 middleName String
 gender String
 phoneNumber String @unique
 primaryEmail String @unique
 email String[] @unique
 password String
 confirmPassword String
 photo String?
 about String?
 cv String[]
 qualifications Qualifications[]
 posts Posts []
 comments Comment []
 jobs Jobs[]
 messages Messaging []
 jobApplication ApplyForJob []
 createdAt DateTime
 updatedAt DateTime?
 notification Notification[]
 passwordChangeAt DateTime?
}

model Qualifications{
  id Int @id @default(autoincrement())
  school String
  qualification String
  createdAt DateTime
  updatedAt DateTime?
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  userId Int
}

model Posts{
  id Int @id @default(autoincrement())
  text String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  comments Comment []
  createAt DateTime 
  updatedAt DateTime?
  
}

model Comment{
  id Int @id @default(autoincrement())
  text String
  post Posts @relation(fields: [postId],references: [id], onDelete: Cascade)
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  userId Int
  postId Int
  createdAt DateTime
  updatedAt DateTime?
}

model Jobs{
  id Int @id @default(autoincrement())
  jobTitle String
  company String
  summary String
  photo String? 
  jobDetails String
  status Boolean @default(true)
  user User @relation(fields: [userId], references: [id])
  userId Int
  applicant ApplyForJob []
  createdAt DateTime 
  updatedAt DateTime?
}

model ApplyForJob{
  id Int @id @default(autoincrement())
  name String
  phoneNumber String
  coverLetter String?
  linkedin String?
  experience Int @default(0)
  quoteSalary Int @default(0)
  cv String
  job Jobs @relation(fields: [jobId],references: [id],onDelete: Cascade)
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  jobId Int
  createdAt DateTime 
  updatedAt DateTime?

}

model Messaging{
  id Int @id @default(autoincrement())
  text String
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int
  createdAt DateTime
  updatedAt DateTime?

}

model Notification{
  id Int @id @default(autoincrement())
  text String
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int @unique
  createdAt DateTime
  updatedAt DateTime?
}




