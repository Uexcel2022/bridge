generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String           @id @default(uuid())
  surname                    String
  firstName                  String
  phoneNumber                String           @unique
  primaryEmail               String           @unique
  email                      String[]         @unique
  password                   String
  about                      String?
  createdAt                  DateTime
  updatedAt                  DateTime?
  passwordChangeAt           DateTime?
  gender                     String
  middleName                 String
  role                       String
  passwordChangeToken        String?
  passwordChangeTokenExpires DateTime?
  active                     Boolean          @default(true)
  imageUrl                   String?
  publicId                   String?
  jobApplication             ApplyForJob[]
  qualifications             Qualifications[]
  resume                     Resume[]
}

model Qualifications {
  id            String    @id @default(uuid())
  school        String
  qualification String
  userId        String
  createdAt     DateTime
  updatedAt     DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id        String    @id @default(uuid())
  imageUrl  String?
  publicId  String?
  userId    String
  createdAt DateTime
  updatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recruiter {
  id                         String    @id @default(uuid())
  name                       String
  description                String
  email                      String    @unique
  phone                      String    @unique
  role                       String
  password                   String?
  imageUrl                   String?
  publicId                   String?
  active                     Boolean   @default(true)
  passwordChangeToken        String?
  passwordChangeTokenExpires DateTime?
  passwordChangeAt           DateTime?
  createdAt                  DateTime
  updatedAt                  DateTime?
  jobs                       Job[]
}

model Job {
  id          String        @id @default(uuid())
  title       String
  type        String
  description String
  location    String
  salary      String
  createdAt   DateTime
  updatedAt   DateTime?
  active      Boolean       @default(true)
  recruiterId String
  applicant   ApplyForJob[]
  recruiter   Recruiter     @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
}

model ApplyForJob {
  id          String    @id @default(uuid())
  name        String
  phoneNumber String
  coverLetter String?
  linkedin    String?
  experience  Int       @default(0)
  quoteSalary Int       @default(0)
  cv          String
  userId      String
  jobId       String
  createdAt   DateTime
  updatedAt   DateTime?
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
